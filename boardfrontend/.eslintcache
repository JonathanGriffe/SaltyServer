[{"D:\\Workspace\\status-board\\boardfrontend\\src\\index.js":"1"},{"size":3065,"mtime":1613486592194,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"ktsk11","D:\\Workspace\\status-board\\boardfrontend\\src\\index.js",["7","8"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tooltip from 'react-float-tooltip';\n\nvar ws_url = 'ws://localhost:8000/ws/status/';\nvar ticksSocket = new WebSocket(ws_url);\n\nclass Data extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      red: {\n        name:null,\n        wins:0,\n        losses:0,\n        avgBetShare:0,\n      },\n      blue: {\n        name:null,\n        wins:0,\n        losses:0,\n        avgBetShare:0,\n      },\n      status: null,\n      NScoreDiff: 0,\n    }\n  }\n\n  setStatus(data){\n    this.setState(data);\n  }\n\n  componentDidMount(){\n    ticksSocket.onmessage = function(event) {\n        var data = JSON.parse(event.data);\n        console.log(data);\n        this.setState(data);\n    }.bind(this)\n  }\n\n  render() {\n    var status = null;\n    switch(this.state.status) {\n      case '1':\n        status = this.state.red.name + \" won !\";\n        break;\n      case '2':\n        status = this.state.blue.name + \" won !\";\n        break;\n      case 'open':\n        status = \"Bets are open !\"\n        break;\n      case 'locked':\n        status = \"Bets are closed !\"\n        break;\n    }\n    var prediction = null;\n    if (this.state.NScoreDiff >= 0.15 && this.state.NScoreDiff < 0.3) {\n    prediction = <h2><span className=\"red\">{this.state.red.name}</span> is more likely to win <span className=\"green\">(+{this.state.NScoreDiff})</span></h2>\n    } else if (this.state.NScoreDiff >= 0.3 && this.state.NScoreDiff < 0.45) {\n    prediction = <h2><span className=\"red\">{this.state.red.name}</span> is predicted to win <span className=\"green\">(+{this.state.NScoreDiff})</span></h2>\n    } else if (this.state.NScoreDiff >= 0.45) {\n      prediction = <h2><span className=\"red\">{this.state.red.name}</span> will probably win <span className=\"green\">(+{this.state.NScoreDiff})</span></h2>\n    } else if (this.state.NScoreDiff <= -0.15 && this.state.NScoreDiff > -0.3) {\n      prediction = <h2><span className=\"blue\">{this.state.blue.name}</span> is more likely to win <span className=\"green\">(+{-this.state.NScoreDiff})</span></h2>\n    } else if (this.state.NScoreDiff <= -0.3 && this.state.NScoreDiff > -0.45) {\n      prediction = <h2><span className=\"blue\">{this.state.blue.name}</span> is predicted to win <span className=\"green\">(+{-this.state.NScoreDiff})</span></h2>\n    } else if (this.state.NScoreDiff <= -0.45) {\n      prediction = <h2><span className=\"blue\">{this.state.blue.name}</span> is predicted to win <span className=\"green\">(+{-this.state.NScoreDiff})</span></h2>\n    } else {\n      prediction = <h2>Cannot make a prediction ({this.state.NScoreDiff >=0 ? \"+\" : \"\"}{this.state.NScoreDiff})</h2>\n    }\n    console.log(status);\n    return(\n      <div className=\"board\">\n        <h2><span className=\"red\">{this.state.red.name}</span> vs <span className=\"blue\">{this.state.blue.name}</span></h2>\n        <br></br>\n        <h2>{status}</h2>\n        <br></br>\n        {prediction}\n      </div>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <Data />,\n  document.getElementById('root')\n);",{"ruleId":"9","severity":1,"message":"10","line":4,"column":8,"nodeType":"11","messageId":"12","endLine":4,"endColumn":15},{"ruleId":"13","severity":1,"message":"14","line":44,"column":5,"nodeType":"15","messageId":"16","endLine":57,"endColumn":6},"no-unused-vars","'Tooltip' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]